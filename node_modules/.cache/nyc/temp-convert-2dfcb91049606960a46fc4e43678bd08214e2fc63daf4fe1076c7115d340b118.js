function cov_emlmp01is(){var path="C:\\Users\\frank\\Thinkful\\my-helper-functions\\temp-convert.js";var hash="8b99a5264d2186dca68198ebc8aa1cd2e93b38e7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\frank\\Thinkful\\my-helper-functions\\temp-convert.js",statementMap:{"0":{start:{line:49,column:0},end:{line:49,column:29}}},fnMap:{"0":{name:"convertToCelsius",decl:{start:{line:7,column:9},end:{line:7,column:25}},loc:{start:{line:7,column:39},end:{line:9,column:1}},line:7}},branchMap:{},s:{"0":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8b99a5264d2186dca68198ebc8aa1cd2e93b38e7"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_emlmp01is=function(){return actualCoverage;};}return actualCoverage;}cov_emlmp01is();/* eslint-disable no-console */ /* eslint-disable strict */ /**
 * * --Temperature Converter--  
 * * A helper function to quickly perform temperature conversions and return result as string.*/function convertToCelsius(temp,units){cov_emlmp01is().f[0]++;}//TODO Break this function down into smaller helper functions
/*function tempConvert(temperature, currentScale, endScale) {
  let result;
  if(currentScale.toLowerCase() === 'f' || currentScale.toLowerCase() === 'fahrenheit') { //!>Conversions from Fahrenheit
    if(endScale.toLowerCase() === 'c' || currentScale.toLowerCase() === 'celsius') {
      result = ((temperature - 32) * 5 / 9);
    }
    else if(endScale.toLowerCase() === 'k' || currentScale.toLowerCase() === 'kelvin') {
      result = ((temperature - 32) * 5 / 9 + 273.15);
    }
  }
  else if(currentScale.toLowerCase() === 'c' || currentScale.toLowerCase() === 'celsius') { //!>Conversions from Celsius
    if(endScale.toLowerCase() === 'f' || currentScale.toLowerCase() === 'fahrenheit') {
      result = ((temperature * 9 / 5) + 32);
    }
    else if(endScale.toLowerCase() === 'k' || currentScale.toLowerCase() === 'kelvin') {
      result = (temperature + 273.15);
    }
  }
  else if(currentScale.toLowerCase() === 'k' || currentScale.toLowerCase() === 'kelvin') {//!>Conversions from Kelvin
    if(endScale.toLowerCase() === 'f' || currentScale.toLowerCase() === 'fahrenheit') {
      result = ((temperature - 273.15) * 9 / 5 + 32);
    }
    else if(endScale.toLowerCase() === 'c' || currentScale.toLowerCase() === 'celsius') {
      result = (temperature - 273.15);
    }
  }
  //sub this return line for testing purposes
  return `${temperature.toFixed(2)}° ${currentScale[0].toUpperCase()} = ${result.toFixed(2)}° ${endScale[0].toUpperCase()}`;
  //return result.toFixed(2);
}*/cov_emlmp01is().s[0]++;module.exports=tempConvert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbXAtY29udmVydC5qcyJdLCJuYW1lcyI6WyJjb252ZXJ0VG9DZWxzaXVzIiwidGVtcCIsInVuaXRzIiwibW9kdWxlIiwiZXhwb3J0cyIsInRlbXBDb252ZXJ0Il0sIm1hcHBpbmdzIjoiOHpCQWVZO3lGQWZaLCtCLENBQ0EsMkIsQ0FDQTtBQUNBO0FBQ0EsZ0dBRUEsUUFBU0EsQ0FBQUEsZ0JBQVQsQ0FBMEJDLElBQTFCLENBQWdDQyxLQUFoQyxDQUF1Qyx3QkFFdEMsQ0FRRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHLHVCQUVBQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJDLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBzdHJpY3QgKi9cclxuLyoqXHJcbiAqICogLS1UZW1wZXJhdHVyZSBDb252ZXJ0ZXItLSAgXHJcbiAqICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gcXVpY2tseSBwZXJmb3JtIHRlbXBlcmF0dXJlIGNvbnZlcnNpb25zIGFuZCByZXR1cm4gcmVzdWx0IGFzIHN0cmluZy4qL1xyXG5cclxuZnVuY3Rpb24gY29udmVydFRvQ2Vsc2l1cyh0ZW1wLCB1bml0cykge1xyXG5cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy9UT0RPIEJyZWFrIHRoaXMgZnVuY3Rpb24gZG93biBpbnRvIHNtYWxsZXIgaGVscGVyIGZ1bmN0aW9uc1xyXG4vKmZ1bmN0aW9uIHRlbXBDb252ZXJ0KHRlbXBlcmF0dXJlLCBjdXJyZW50U2NhbGUsIGVuZFNjYWxlKSB7XHJcbiAgbGV0IHJlc3VsdDtcclxuICBpZihjdXJyZW50U2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gJ2YnIHx8IGN1cnJlbnRTY2FsZS50b0xvd2VyQ2FzZSgpID09PSAnZmFocmVuaGVpdCcpIHsgLy8hPkNvbnZlcnNpb25zIGZyb20gRmFocmVuaGVpdFxyXG4gICAgaWYoZW5kU2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gJ2MnIHx8IGN1cnJlbnRTY2FsZS50b0xvd2VyQ2FzZSgpID09PSAnY2Vsc2l1cycpIHtcclxuICAgICAgcmVzdWx0ID0gKCh0ZW1wZXJhdHVyZSAtIDMyKSAqIDUgLyA5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoZW5kU2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gJ2snIHx8IGN1cnJlbnRTY2FsZS50b0xvd2VyQ2FzZSgpID09PSAna2VsdmluJykge1xyXG4gICAgICByZXN1bHQgPSAoKHRlbXBlcmF0dXJlIC0gMzIpICogNSAvIDkgKyAyNzMuMTUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBlbHNlIGlmKGN1cnJlbnRTY2FsZS50b0xvd2VyQ2FzZSgpID09PSAnYycgfHwgY3VycmVudFNjYWxlLnRvTG93ZXJDYXNlKCkgPT09ICdjZWxzaXVzJykgeyAvLyE+Q29udmVyc2lvbnMgZnJvbSBDZWxzaXVzXHJcbiAgICBpZihlbmRTY2FsZS50b0xvd2VyQ2FzZSgpID09PSAnZicgfHwgY3VycmVudFNjYWxlLnRvTG93ZXJDYXNlKCkgPT09ICdmYWhyZW5oZWl0Jykge1xyXG4gICAgICByZXN1bHQgPSAoKHRlbXBlcmF0dXJlICogOSAvIDUpICsgMzIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihlbmRTY2FsZS50b0xvd2VyQ2FzZSgpID09PSAnaycgfHwgY3VycmVudFNjYWxlLnRvTG93ZXJDYXNlKCkgPT09ICdrZWx2aW4nKSB7XHJcbiAgICAgIHJlc3VsdCA9ICh0ZW1wZXJhdHVyZSArIDI3My4xNSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2UgaWYoY3VycmVudFNjYWxlLnRvTG93ZXJDYXNlKCkgPT09ICdrJyB8fCBjdXJyZW50U2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gJ2tlbHZpbicpIHsvLyE+Q29udmVyc2lvbnMgZnJvbSBLZWx2aW5cclxuICAgIGlmKGVuZFNjYWxlLnRvTG93ZXJDYXNlKCkgPT09ICdmJyB8fCBjdXJyZW50U2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhaHJlbmhlaXQnKSB7XHJcbiAgICAgIHJlc3VsdCA9ICgodGVtcGVyYXR1cmUgLSAyNzMuMTUpICogOSAvIDUgKyAzMik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGVuZFNjYWxlLnRvTG93ZXJDYXNlKCkgPT09ICdjJyB8fCBjdXJyZW50U2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gJ2NlbHNpdXMnKSB7XHJcbiAgICAgIHJlc3VsdCA9ICh0ZW1wZXJhdHVyZSAtIDI3My4xNSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vc3ViIHRoaXMgcmV0dXJuIGxpbmUgZm9yIHRlc3RpbmcgcHVycG9zZXNcclxuICByZXR1cm4gYCR7dGVtcGVyYXR1cmUudG9GaXhlZCgyKX3CsCAke2N1cnJlbnRTY2FsZVswXS50b1VwcGVyQ2FzZSgpfSA9ICR7cmVzdWx0LnRvRml4ZWQoMil9wrAgJHtlbmRTY2FsZVswXS50b1VwcGVyQ2FzZSgpfWA7XHJcbiAgLy9yZXR1cm4gcmVzdWx0LnRvRml4ZWQoMik7XHJcbn0qL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB0ZW1wQ29udmVydDtcclxuXHJcblxyXG4iXX0=